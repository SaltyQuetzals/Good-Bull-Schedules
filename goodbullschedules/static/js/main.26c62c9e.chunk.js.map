{"version":3,"sources":["components/AddCourseDialog.jsx","components/AddScheduleDialog.jsx","redux/types.ts","components/SectionListItem.tsx","redux/actions.ts","components/CourseListItem.tsx","components/CourseList.tsx","components/ScheduleSelect.tsx","App.tsx","serviceWorker.js","redux/reducers.ts","index.tsx"],"names":["AddCourseDialog","react_default","a","createElement","react_dialog_dist_default","open","this","props","react_dialog_dist","action","isDefault","Component","AddScheduleDialog","ADD_SECTION","REMOVE_SECTION","ADD_COURSE","REMOVE_COURSE","ADD_SCHEDULE","REMOVE_SCHEDULE","SELECT_SCHEDULE","LOAD_SCHEDULES","LETTER_MAP","A","B","C","D","F","Q","GradeDistribution","historical_performance","console","log","divs","sum","letter","val","push","key","style","backgroundColor","width","concat","toFixed","display","border","boxSizing","height","marginLeft","SectionListItem","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkboxClickHandler","bind","assertThisInitialized","isChecked","selectedCrns","has","section","crn","removeSection","addSection","_this$props$section","section_num","instructor","react_list_dist","react_checkbox_dist","initRipple","checked","onChange","primaryText","secondaryText","graphic","SectionListItem_GradeDistribution","React","connect","state","Set","currScheduleName","schedule","schedules","get","dispatch","sectionCrn","type","payload","CourseListItem","indeterminate","handleDeleteClick","removeCourse","dept","course_num","triggerElem","className","name","meta","react_icon_button_dist_default","onClick","react_material_icon_dist_default","icon","Collapsible_default","trigger","transitionTime","react_list_dist_default","twoLine","sections","map","_ref","i","components_SectionListItem","CourseList","courseListItems","courses","forEach","course","sectionProps","components_CourseListItem","avatarList","Map","ScheduleSelect","handleSelectionChange","scheduleNames","length","selectSchedule","evt","target","value","react_select_dist_default","options","App","addCourseDialogIsOpen","addScheduleDialogIsOpen","handleClick","_this2","fetch","then","response","json","loadSchedules","catch","err","e","anySchedulesCreated","setState","_this$props","dist_default","dist","components_ScheduleSelect","Array","from","keys","components_CourseList","react_fab_dist_default","AddScheduleDialog_AddScheduleDialog","AddCourseDialog_AddCourseDialog","Boolean","window","location","hostname","match","initialState","undefined","timeStringToMinSinceMidnight","timeString","_timeString$split$map","split","chunk","Number","parseInt","_timeString$split$map2","slicedToArray","store","createStore","arguments","newState","objectSpread","add","delete","set","_action$payload","Error","newSchedule","term_code","scheduleName","courseName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","start_time","end_time","return","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26c62c9e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Dialog, {\n  DialogTitle,\n  DialogContent,\n  DialogFooter,\n  DialogButton\n} from \"@material/react-dialog\";\n\nexport default class AddCourseDialog extends Component {\n  render() {\n    return (\n      <Dialog open={this.props.open}>\n        <DialogTitle>Add Course</DialogTitle>\n        <DialogContent />\n        <DialogFooter>\n          <DialogButton action=\"dismiss\">Dismiss</DialogButton>\n          <DialogButton action=\"accept\" isDefault>\n            Accept\n          </DialogButton>\n        </DialogFooter>\n      </Dialog>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Dialog, {\n  DialogTitle,\n  DialogContent,\n  DialogFooter,\n  DialogButton\n} from \"@material/react-dialog\";\n\nexport default class AddScheduleDialog extends Component {\n  render() {\n    return (\n      <Dialog open={this.props.open}>\n        <DialogTitle>Add Schedule</DialogTitle>\n        <DialogContent />\n        <DialogFooter>\n          <DialogButton action=\"dismiss\">Dismiss</DialogButton>\n          <DialogButton action=\"accept\" isDefault>\n            Accept\n          </DialogButton>\n        </DialogFooter>\n      </Dialog>\n    );\n  }\n}\n","export const ADD_SECTION = \"ADD_SECTION\";\nexport const REMOVE_SECTION = \"REMOVE_SECTION\";\nexport const ADD_COURSE = \"ADD_COURSE\";\nexport const REMOVE_COURSE = \"REMOVE_COURSE\";\nexport const ADD_SCHEDULE = \"ADD_SCHEDULE\";\nexport const REMOVE_SCHEDULE = \"REMOVE_SCHEDULE\";\nexport const SELECT_SCHEDULE = \"SELECT_SCHEDULE\";\nexport const LOAD_SCHEDULES = \"LOAD_SCHEDULES\";\n\nexport interface Meeting {\n  location: string | null;\n  meeting_days: string | null;\n  start_time: number;\n  end_time: number;\n  meeting_type: string;\n}\n\nexport interface Section {\n  dept: string;\n  course_num: string;\n  section_num: string;\n  name: string;\n  term_code: number;\n  crn: number;\n  meetings: Array<Meeting>;\n  historical_performance: {\n    A: number | null,\n    B: number | null,\n    C: number | null,\n    D: number | null,\n    F: number | null,\n    I: number | null,\n    S: number | null,\n    U: number | null,\n    Q: number | null,\n    X: number | null,\n  }\n  min_credits: number | null;\n  max_credits: number | null;\n  instructor: string | null;\n}\n\nexport interface Course {\n  dept: string;\n  course_num: string;\n  name: string;\n  prerequisites: string | null;\n  corequisites: string | null;\n  min_credits: number | null;\n  max_credits: number | null;\n  description: string | null;\n  distribution_of_hours: string | null;\n  sections: Array<Section>;\n}\n\nexport interface Schedule {\n  name: string;\n  term_code: number;\n  courses: Map<string, Course>;\n  selectedCrns: Set<number>;\n}\n\nexport interface AddSectionAction {\n  type: typeof ADD_SECTION;\n  payload: number;\n}\n\nexport interface RemoveSectionAction {\n  type: typeof REMOVE_SECTION;\n  payload: number;\n}\n\nexport interface AddCourseAction {\n  type: typeof ADD_COURSE;\n  payload: Course;\n}\n\nexport interface RemoveCourseAction {\n  type: typeof REMOVE_COURSE;\n  payload: { dept: string, course_num: string };\n}\n\nexport interface AddScheduleAction {\n  type: typeof ADD_SCHEDULE;\n  payload: {\n    name: string; // Schedule name\n    term_code: number;\n  };\n}\n\nexport interface RemoveScheduleAction {\n  type: typeof REMOVE_SCHEDULE;\n  payload: string; // Schedule name\n}\n\nexport interface SelectScheduleAction {\n  type: typeof SELECT_SCHEDULE;\n  payload: string;\n}\n\nexport interface LoadSchedulesAction {\n  type: typeof LOAD_SCHEDULES;\n  payload: Array<any>;\n}\n\nexport interface SchedulesState {\n  schedules: Map<string, Schedule>;\n  currScheduleName: string | undefined;\n}\n\nexport type SectionActionTypes = AddSectionAction | RemoveSectionAction;\nexport type CourseActionTypes = AddCourseAction | RemoveCourseAction;\nexport type ScheduleActionTypes =\n  | AddScheduleAction\n  | RemoveScheduleAction\n  | SelectScheduleAction\n  | LoadSchedulesAction;\n\nexport type ActionTypes =\n  | SectionActionTypes\n  | CourseActionTypes\n  | ScheduleActionTypes;\n","import React from \"react\";\nimport { ListItem, ListItemText, ListItemGraphic } from \"@material/react-list\";\nimport { Section, Schedule, SchedulesState } from \"../redux/types\";\nimport { Checkbox } from \"@material/react-checkbox\";\nimport { addSection, removeSection } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\n\nexport interface SectionListItemProps {\n  section: Section;\n  addSection?: any;\n  removeSection?: any;\n  selectedCrns?: Set<number>;\n}\n\ninterface GradeDistributionProps {\n  historical_performance: { [key: string]: (number | null) };\n}\n\nconst LETTER_MAP: { [key: string]: string } = {\n  \"A\": \"#00BCD4\",\n  \"B\": \"#A5D6A7\",\n  \"C\": \"#FFEE58\",\n  \"D\": \"#E57373\",\n  \"F\": \"#90A4AE\",\n  \"Q\": \"#D1C4E9\",\n}\n\nconst GradeDistribution: React.FunctionComponent<\n  GradeDistributionProps\n> = props => {\n  const { historical_performance } = props;\n  console.log(historical_performance);\n  if (historical_performance['A'] === null) {\n    return <div />;\n  } else {\n    const divs = [];\n    let sum = 0;\n    for (const letter in LETTER_MAP) {\n      const val = historical_performance[letter];\n      sum += val ? val : 0;\n    }\n    for (const letter in LETTER_MAP) {\n      const val = historical_performance[letter];\n      if (val) {\n        console.log(val / sum - 0.1);\n        divs.push(<div key={letter} style={{\n          backgroundColor: LETTER_MAP[letter],\n          width: `${((val / sum) * 100 - 0.1).toFixed(2)}%`,\n          display: \"inline-block\",\n          border: \"1px solid white\",\n          boxSizing: \"border-box\",\n          height: 20\n        }}></div>)\n      }\n    }\n    return <div style={{ width: '40%', marginLeft: 'auto' }}>{divs}</div>;\n  }\n};\n\nclass SectionListItem extends React.Component<\n  SectionListItemProps\n  > {\n\n  constructor(props: SectionListItemProps) {\n    super(props);\n    this.checkboxClickHandler = this.checkboxClickHandler.bind(this);\n    this.isChecked = this.isChecked.bind(this);\n    this.checkboxClickHandler = this.checkboxClickHandler.bind(this);\n  }\n\n  isChecked(): boolean {\n    if (this.props.selectedCrns) {\n      return this.props.selectedCrns.has(this.props.section.crn);\n    }\n    return false;\n  }\n\n  checkboxClickHandler() {\n    if (this.isChecked()) {\n      this.props.removeSection(this.props.section.crn);\n    } else {\n      this.props.addSection(this.props.section.crn);\n    }\n  }\n  render() {\n    const { section_num, instructor, historical_performance } = this.props.section;\n    return (\n      <ListItem>\n        <Checkbox initRipple={() => { }} checked={this.isChecked()} onChange={this.checkboxClickHandler} />\n        <ListItemText primaryText={section_num} secondaryText={instructor} />\n        <ListItemGraphic graphic={<GradeDistribution historical_performance={historical_performance} />} />\n      </ListItem>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addSection: (sectionCrn: number) => dispatch(addSection(sectionCrn)),\n    removeSection: (sectionCrn: number) => dispatch(removeSection(sectionCrn))\n  }\n}\n\nconst mapStateToProps = (state: SchedulesState) => {\n  let selectedCrns = new Set<number>();\n  if (state.currScheduleName) {\n    const schedule = state.schedules.get(state.currScheduleName);\n    if (schedule) {\n      selectedCrns = schedule.selectedCrns;\n    }\n  }\n  return { selectedCrns };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SectionListItem);","import {\n  SectionActionTypes,\n  ADD_SECTION,\n  REMOVE_SECTION,\n  Course,\n  CourseActionTypes,\n  ADD_COURSE,\n  REMOVE_COURSE,\n  ScheduleActionTypes,\n  Schedule,\n  ADD_SCHEDULE,\n  REMOVE_SCHEDULE,\n  SELECT_SCHEDULE,\n  LOAD_SCHEDULES\n} from \"./types\";\n\nexport function addSection(sectionCrn: number): SectionActionTypes {\n  return { type: ADD_SECTION, payload: sectionCrn };\n}\n\nexport function removeSection(sectionCrn: number): SectionActionTypes {\n  return { type: REMOVE_SECTION, payload: sectionCrn };\n}\n\nexport function addCourse(course: Course): CourseActionTypes {\n  return { type: ADD_COURSE, payload: course };\n}\n\nexport function removeCourse(dept: string, course_num: string): CourseActionTypes {\n  return { type: REMOVE_COURSE, payload: { dept, course_num } };\n}\n\nexport function addSchedule(\n  name: string,\n  term_code: number\n): ScheduleActionTypes {\n  return { type: ADD_SCHEDULE, payload: { name, term_code } };\n}\n\nexport function removeSchedule(name: string): ScheduleActionTypes {\n  return { type: REMOVE_SCHEDULE, payload: name };\n}\n\nexport function selectSchedule(name: string): ScheduleActionTypes {\n  return { type: SELECT_SCHEDULE, payload: name };\n}\n\nexport function loadSchedules(schedules: Array<any>): ScheduleActionTypes {\n  return { type: LOAD_SCHEDULES, payload: schedules };\n}\n","import React from \"react\";\nimport List, {\n  ListItem,\n  ListItemText,\n  ListItemMeta\n} from \"@material/react-list\";\nimport IconButton from \"@material/react-icon-button\";\nimport MaterialIcon from \"@material/react-material-icon\";\n\nimport Collapsible from \"react-collapsible\";\nimport ConnectedSectionListItem, {SectionListItemProps} from \"./SectionListItem\";\nimport { removeCourse } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\n\ninterface CourseListItemProps {\n  dept: string;\n  course_num: string;\n  name: string;\n  sections: Array<SectionListItemProps>;\n  removeCourse: any;\n}\n\nclass CourseListItem extends React.Component<\n  CourseListItemProps\n  > {\n  state = { checked: false, indeterminate: false };\n\n  constructor(props: CourseListItemProps) {\n    super(props);\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\n  }\n\n  handleDeleteClick() {\n    this.props.removeCourse(this.props.dept, this.props.course_num);\n  }\n  render() {\n    const triggerElem = (\n      <ListItem className=\"course-list-item\">\n        <ListItemText\n          primaryText={`${this.props.dept}-${this.props.course_num}`}\n          secondaryText={this.props.name}\n        />\n        <ListItemMeta\n          meta={\n            <IconButton onClick={this.handleDeleteClick}>\n              <MaterialIcon icon=\"delete\" />\n            </IconButton>\n          }\n        />\n      </ListItem>\n    );\n\n    return (\n      <Collapsible trigger={triggerElem} transitionTime={250}>\n        <List twoLine className=\"course-sections\">\n          {this.props.sections.map(({ section }, i) => {\n            return <ConnectedSectionListItem key={i} section={section} />;\n          })}\n        </List>\n      </Collapsible>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    removeCourse: (dept: string, course_num: string) => dispatch(removeCourse(dept, course_num))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(CourseListItem);","import React from \"react\";\nimport List from \"@material/react-list\";\n\nimport CourseListItem from \"./CourseListItem\";\nimport { SchedulesState, Course, Section } from \"../redux/types\";\nimport { connect } from \"react-redux\";\n\ninterface CourseListProps {\n  courses: Map<string, Course>;\n}\nclass CourseList extends React.Component<CourseListProps> {\n  render() {\n    let courseListItems: any[] = [];\n    this.props.courses.forEach((course, key) => {\n      const { dept, name, course_num, sections } = course;\n      console.log(dept, course_num, name, sections);\n      const sectionProps = sections.map((section) => ({ section }));\n      courseListItems.push(\n        <CourseListItem\n          key={`${dept}-${course_num}`}\n          name={name}\n          dept={dept}\n          course_num={course_num}\n          sections={sectionProps}\n        />\n      )\n    })\n    return (\n      <List twoLine avatarList>\n        {courseListItems}\n      </List>\n    );\n  }\n}\n\nconst mapStateToProps = (state: SchedulesState) => {\n  let courses = new Map<string, Course>();\n  if (state.currScheduleName) {\n    const schedule = state.schedules.get(state.currScheduleName);\n    if (schedule) {\n      courses = schedule.courses;\n    }\n  }\n  return { courses };\n}\n\nexport default connect(mapStateToProps)(CourseList);","import React, { ChangeEvent, FormEvent } from \"react\";\nimport Select from \"@material/react-select\";\nimport { selectSchedule } from \"../redux/actions\";\nimport { SchedulesState } from \"../redux/types\";\nimport { connect } from \"react-redux\";\n\n\ninterface ScheduleSelectProps {\n  scheduleNames: string[];\n  currScheduleName: string | undefined;\n  selectSchedule: any;\n}\n\nclass ScheduleSelect extends React.Component<ScheduleSelectProps> {\n  constructor(props: ScheduleSelectProps) {\n    super(props);\n    this.handleSelectionChange = this.handleSelectionChange.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.props.currScheduleName) {\n      // HACK: Set choice to first schedule, probably bad UX, but can't really help it right now.\n      if (this.props.scheduleNames.length > 0) {\n        this.props.selectSchedule(this.props.scheduleNames[0]);\n      }\n    }\n  }\n\n  handleSelectionChange(evt: any) {\n    if (evt.target) {\n      this.props.selectSchedule(evt.target.value);\n    } else {\n      console.log(\"Event target is undefined?\");\n    }\n  }\n\n  render() {\n    if (this.props.scheduleNames.length === 0) {\n      return null;\n    } else {\n      return (\n        <Select\n          className=\"schedule-select\"\n          onChange={this.handleSelectionChange}\n          options={this.props.scheduleNames}\n        />\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state: SchedulesState) => ({\n  currScheduleName: state.currScheduleName\n});\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    selectSchedule: (name: string) => dispatch(selectSchedule(name))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScheduleSelect);\n","import React, { Component } from \"react\";\nimport Drawer, {\n  DrawerAppContent,\n  DrawerHeader,\n  DrawerContent\n} from \"@material/react-drawer\";\nimport AddCourseDialog from \"./components/AddCourseDialog\";\nimport AddScheduleDialog from \"./components/AddScheduleDialog\";\nimport CourseList from \"./components/CourseList\";\nimport Fab from \"@material/react-fab\";\n\nimport MaterialIcon from \"@material/react-material-icon\";\nimport ScheduleSelect from \"./components/ScheduleSelect\";\nimport { SchedulesState, Schedule } from \"./redux/types\";\nimport { connect } from \"react-redux\";\nimport { loadSchedules } from \"./redux/actions\";\n\ninterface AppProps {\n  anySchedulesCreated: boolean;\n  schedules: Map<string, Schedule>;\n  currScheduleName: string;\n  loadSchedules: any;\n}\n\nclass App extends Component<AppProps> {\n  state = { addCourseDialogIsOpen: false, addScheduleDialogIsOpen: false };\n\n  constructor(props: any) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"/api/schedules/\")\n      .then(response => response.json())\n      .then(json => {\n        this.props.loadSchedules(json);\n      }).catch((err) => console.log(err));\n  }\n\n  handleClick(e: any) {\n    if (this.props.anySchedulesCreated) {\n      this.setState({ addCourseDialogIsOpen: true });\n    } else {\n      this.setState({ addScheduleDialogIsOpen: true });\n    }\n  }\n  render() {\n    const { schedules, currScheduleName } = this.props;\n    const currSchedule = schedules.get(currScheduleName);\n    console.log(\"Rendering currSchedule\");\n    return (\n      <div className=\"drawer-container\">\n        <Drawer className=\"drawer\">\n          <DrawerHeader>\n            <ScheduleSelect scheduleNames={Array.from(schedules.keys())} />\n          </DrawerHeader>\n\n          <DrawerContent className=\"drawer-content\">\n            <CourseList />\n          </DrawerContent>\n        </Drawer>\n        <DrawerAppContent className=\"drawer-app-content\">\n          <Fab\n            className=\"fab\"\n            icon={<MaterialIcon icon=\"add\" />}\n            onClick={this.handleClick}\n          />\n        </DrawerAppContent>\n        <AddScheduleDialog open={this.state.addScheduleDialogIsOpen} />\n        <AddCourseDialog open={this.state.addCourseDialogIsOpen} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: SchedulesState) => ({\n  anySchedulesCreated: Array.from(state.schedules.keys()).length !== 0,\n  schedules: state.schedules,\n  currScheduleName: state.currScheduleName\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    loadSchedules: (schedules: Array<any>) => dispatch(loadSchedules(schedules))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SchedulesState,\n  Schedule,\n  ActionTypes,\n  ADD_SECTION,\n  REMOVE_SECTION,\n  ADD_COURSE,\n  REMOVE_COURSE,\n  ADD_SCHEDULE,\n  REMOVE_SCHEDULE,\n  SELECT_SCHEDULE,\n  LOAD_SCHEDULES,\n  Course\n} from \"./types\";\n\n// let x = new Map<string, Schedule>();\n\n// let DummySched: Schedule = {\n//   \"name\": \"Dummy\",\n//   \"term_code\": 201931,\n//   \"courses\": [{ \"dept\": \"ACCT\", \"course_num\": \"209\", \"name\": \"Survey Of Acct Prin\", \"description\": \"Accounting survey for non-business majors; non-technical accounting procedures, preparation and interpretation of financial statements and internal control. May not be used to satisfy degree requirements for majors in business. Business majors who choose to take this course must do so on a satisfactory/unsatisfactory basis.\", \"prerequisites\": null, \"corequisites\": null, \"min_credits\": 3.0, \"max_credits\": 3.0, \"distribution_of_hours\": \"3 Lecture Hours.\", \"sections\": [{ \"name\": \"SURVEY OF ACCT PRIN\", \"term_code\": 201931, \"crn\": 10002, \"dept\": \"ACCT\", \"course_num\": \"209\", \"section_num\": \"502\", \"min_credits\": 3.0, \"max_credits\": 3.0, \"instructor\": \"Morgan E Clarke\", \"meetings\": [{ \"location\": \"Wehner - College of Business 113\", \"meeting_days\": \"R\", \"start_time\": 480, \"end_time\": 555, \"meeting_type\": \"Lecture\" }], \"historical_performance\": { \"A\": null, \"B\": null, \"C\": null, \"D\": null, \"F\": null, \"I\": null, \"S\": null, \"U\": null, \"Q\": null, \"X\": null } }, { \"name\": \"SURVEY OF ACCT PRIN\", \"term_code\": 201931, \"crn\": 27822, \"dept\": \"ACCT\", \"course_num\": \"209\", \"section_num\": \"503\", \"min_credits\": 3.0, \"max_credits\": 3.0, \"instructor\": \"Morgan E Clarke\", \"meetings\": [{ \"location\": \"Wehner - College of Business 113\", \"meeting_days\": \"T\", \"start_time\": 480, \"end_time\": 480, \"meeting_type\": \"Lecture\" }], \"historical_performance\": { \"A\": null, \"B\": null, \"C\": null, \"D\": null, \"F\": null, \"I\": null, \"S\": null, \"U\": null, \"Q\": null, \"X\": null } }, { \"name\": \"SURVEY OF ACCT PRIN\", \"term_code\": 201931, \"crn\": 27824, \"dept\": \"ACCT\", \"course_num\": \"209\", \"section_num\": \"504\", \"min_credits\": 3.0, \"max_credits\": 3.0, \"instructor\": \"Morgan E Clarke\", \"meetings\": [{ \"location\": \"Wehner - College of Business 113\", \"meeting_days\": \"R\", \"start_time\": 480, \"end_time\": 555, \"meeting_type\": \"Lecture\" }], \"historical_performance\": { \"A\": null, \"B\": null, \"C\": null, \"D\": null, \"F\": null, \"I\": null, \"S\": null, \"U\": null, \"Q\": null, \"X\": null } }, { \"name\": \"SURVEY OF ACCT PRIN\", \"term_code\": 201931, \"crn\": 10001, \"dept\": \"ACCT\", \"course_num\": \"209\", \"section_num\": \"501\", \"min_credits\": 3.0, \"max_credits\": 3.0, \"instructor\": \"Morgan E Clarke\", \"meetings\": [{ \"location\": \"Wehner - College of Business 113\", \"meeting_days\": \"T\", \"start_time\": 480, \"end_time\": 555, \"meeting_type\": \"Lecture\" }], \"historical_performance\": { A: 30, B: 20, C: 10, D: 0, F: 0, I: 0, S: 0, U: 0, Q: 30, X: 0 } }] }],\n//   \"selectedCrns\": new Set<number>([10001])\n// }\n\n// x.set(\"Dummy\", DummySched);\n// x.set(\"Dummy2\", { \"courses\": [], \"selectedCrns\": new Set<number>(), \"term_code\": 201831, name: \"Dummy2\" });\n\nconst initialState: SchedulesState = {\n  schedules: new Map<string, Schedule>(),\n  currScheduleName: undefined\n};\n\nconst timeStringToMinSinceMidnight = (timeString: string): number => {\n  const [hour, minute, second] = timeString.split(\":\").map((chunk) => Number.parseInt(chunk));\n  return hour * (60 + minute) + (second / 60);\n}\n\n\nexport function reducer(\n  state = initialState,\n  action: ActionTypes\n): SchedulesState {\n  let newState = { ...state };\n  const { currScheduleName } = newState;\n  if (action.type === SELECT_SCHEDULE) {\n    newState.currScheduleName = action.payload;\n  }\n  if (currScheduleName) {\n    const schedule = newState.schedules.get(currScheduleName);\n    if (schedule) {\n      switch (action.type) {\n        case ADD_SECTION:\n          schedule.selectedCrns.add(action.payload);\n          break;\n        case REMOVE_SECTION:\n          schedule.selectedCrns.delete(action.payload);\n          break;\n        case ADD_COURSE:\n          schedule.courses.set(`${action.payload.dept}-${action.payload.course_num}`, action.payload);\n          break;\n        case REMOVE_COURSE:\n          const { dept, course_num } = action.payload;\n          schedule.courses.delete(`${dept}-${course_num}`);\n          break;\n        case REMOVE_SCHEDULE:\n          newState.schedules.delete(action.payload);\n          break;\n      }\n    } else {\n      if (action.type === ADD_SCHEDULE) {\n        const newSchedule: Schedule = {\n          name: action.payload.name,\n          term_code: action.payload.term_code,\n          courses: new Map<string, Course>(),\n          selectedCrns: new Set<number>()\n        };\n        newState.schedules.set(action.payload.name, newSchedule);\n      } else {\n        throw Error(\"The schedule attempting to be accessed does not exist.\");\n      }\n    }\n  } else {\n    if (action.type === LOAD_SCHEDULES) {\n      console.log(action.payload);\n      for (let scheduleName in action.payload) {\n        let schedule = action.payload[scheduleName];\n        for (let courseName in schedule.courses) {\n          const course = schedule.courses[courseName];\n          for (let section of course.sections) {\n            if (section.start_time) {\n              section.start_time = timeStringToMinSinceMidnight(section.start_time);\n            } if (section.end_time) {\n              section.end_time = timeStringToMinSinceMidnight(section.end_time);\n            }\n          }\n        }\n        schedule.selectedCrns = schedule.sections.map((section: string) =>\n          Number.parseInt(section.split(\"_\")[0])\n        );\n        delete schedule.sections;\n        newState.schedules.set(scheduleName, schedule);\n      }\n    }\n  }\n  console.log(newState);\n  return newState;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { reducer } from \"./redux/reducers\";\n\nimport \"@material/react-drawer/dist/drawer.min.css\";\nimport \"@material/react-checkbox/dist/checkbox.min.css\";\nimport \"@material/react-list/dist/list.min.css\";\nimport \"@material/react-icon-button/dist/icon-button.min.css\";\nimport \"@material/react-material-icon/dist/material-icon.min.css\";\nimport \"@material/react-fab/dist/fab.min.css\";\nimport \"@material/react-dialog/dist/dialog.min.css\";\nimport \"@material/react-button/dist/button.min.css\";\nimport \"@material/react-select/dist/select.min.css\";\n\nimport \"./App.scss\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}